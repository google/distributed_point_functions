// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package distributed_point_functions;

import "dpf/distributed_point_function.proto";
import "pir/hashing/hash_family_config.proto";

option java_multiple_files = true;
option java_package = "com.google.dpf.pir";

// PirConfig contanis the database dimensions, sparsity, type of PIR, etc...
// It is used by both client and server, ususally in the respective factory
// functions.
message PirConfig {
  oneof wrapped_pir_config {
    DenseDpfPirConfig dense_dpf_pir_config = 1;
    CuckooHashingSparseDpfPirConfig cuckoo_hashing_sparse_dpf_pir_config = 2;
    SimpleHashingSparseDpfPirConfig simple_hashing_sparse_dpf_pir_config = 3;
  }
}

//=============================================================================
// Abstract PIR Interface. This is supposed to cover all PIR implementations
// we care about.
//=============================================================================

// Client's per-request state needed to handle a single PirResponse.
message PirRequestClientState {
  oneof wrapped_pir_request_client_state {
    DenseDpfPirRequestClientState dense_dpf_pir_request_client_state = 1;
    CuckooHashingSparseDpfPirRequestClientState
        cuckoo_hashing_sparse_dpf_pir_request_client_state = 2;
    SimpleHashingSparseDpfPirRequestClientState
        simple_hashing_sparse_dpf_pir_request_client_state = 3;
  }
}

// Server's public parameters to be sent to the client before any queries are
// issued. Generated by the server.
message PirServerPublicParams {
  oneof wrapped_pir_server_public_params {
    CuckooHashingParams cuckoo_hashing_sparse_dpf_pir_server_params = 1;
    SimpleHashingParams simple_hashing_sparse_dpf_pir_server_params = 2;
  }
}

// A (possibly batched) PIR request sent from the Client to the Leader.
message PirRequest {
  oneof wrapped_pir_request {
    DpfPirRequest dpf_pir_request = 1;
  }
}

// The (possibly batched) Response sent from Helper to Leader and from
// Leader to Client.
message PirResponse {
  oneof wrapped_pir_response {
    DpfPirResponse dpf_pir_response = 1;
  }
}

//=============================================================================
// DPF PIR.
//=============================================================================

// Class definition in dense_dpf_pir_server.h
message DenseDpfPirConfig {
  // Number of elements in the database.
  int64 num_elements = 1;
}

// Class definition in cuckoo_hashing_sparse_dpf_pir_server.h
message CuckooHashingSparseDpfPirConfig {
  HashFamilyConfig.HashFamily hash_family = 1;
  int64 num_elements = 2;
}

// Class definition in simple_hashing_sparse_dpf_pir_server.h
message SimpleHashingSparseDpfPirConfig {
  HashFamilyConfig.HashFamily hash_family = 1;
  int64 num_buckets = 2;
}

// Generated by the server given a CuckooHashingSparseDpfPirConfig.
message CuckooHashingParams {
  // Which particular hash family and seed to use.
  HashFamilyConfig hash_family_config = 1;

  // How many hash functions are used for cuckoo hashing.
  int32 num_hash_functions = 2;

  // How many buckets are used for cuckoo hashing.
  int64 num_buckets = 3;
}

// Generated by the server given a SimpleHashingSparseDpfPirConfig.
message SimpleHashingParams {
  // Which particular hash family and seed to use.
  HashFamilyConfig hash_family_config = 1;

  // How many buckets are used for simple hashing.
  int64 num_buckets = 2;
}

// Used to store multiple key-value pairs in a single database entry.
message HashedPirDatabaseBucket {
  repeated bytes keys = 1;
  repeated bytes values = 2;
}

// A (possibly batched) DPF PIR request sent from the Client to the Server.
message DpfPirRequest {
  // A plain DPF PIR request. Contains one DPF key per batched request.
  message PlainRequest {
    repeated distributed_point_functions.DpfKey dpf_key = 1;

    // Optional fingerprint of the hash function seed for sparse PIRs. Not
    // needed for any security guarantees, but to catch programming errors when
    // inconsistent seeds are used.
    fixed32 seed_fingerprint = 2;
  }

  // Message to the Leader. Contains a PlainRequest, as well as an
  // EncryptedHelperRequest.
  message LeaderRequest {
    PlainRequest plain_request = 1;
    EncryptedHelperRequest encrypted_helper_request = 2;
  }

  // Encrypted message to the Helper. Should decrypt to a `HelperRequest`.
  message EncryptedHelperRequest {
    bytes encrypted_request = 1;
  }

  // Decrypted message to the Helper. Contains a PlainRequest, as well as the
  // one-time-pad used to encrypt the response.
  message HelperRequest {
    PlainRequest plain_request = 1;
    bytes one_time_pad_seed = 2;
  }

  oneof wrapped_request {
    PlainRequest plain_request = 1;
    LeaderRequest leader_request = 2;
    EncryptedHelperRequest encrypted_helper_request = 3;
  }
}

// The seed for the one-time-pad used by the Helper to mask its response.
message DenseDpfPirRequestClientState {
  bytes one_time_pad_seed = 1;
}

// For cuckoo hashing, we need to keep the query around so that we only return
// responses that we actually queried.
message CuckooHashingSparseDpfPirRequestClientState {
  bytes one_time_pad_seed = 1;

  repeated bytes query_strings = 2;
}

// Same as Cuckoo Hashing, we need to remember the queries to check if the key
// was present.
message SimpleHashingSparseDpfPirRequestClientState {
  bytes one_time_pad_seed = 1;

  repeated bytes query_strings = 2;
}

// The (possibly batched) Response sent from Helper to Leader and from
// Leader to Client.
message DpfPirResponse {
  repeated bytes masked_response = 1;
}

message CanonicalPirError {
  enum Code {
    UNKNOWN = 0;

    // ValueSize is zero when attempting to compute inner product with empty
    // database.
    MAX_VALUE_SIZE_IS_ZERO = 1;
  }

  Code code = 1;
}
